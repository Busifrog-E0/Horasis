{
	"Middleware JsDoc": {
		"prefix": [
			"middleware",
			"jsdoc",
		],
		"body": [
			"/**",
			" * @param {e.Request} req  ",
			" * @param {e.Response} res  ",
			" * @param {e.NextFunction} next ",
			" */",
		],
		"description": "API"
	},
	"API Controller JsDoc": {
		"prefix": [
			"controller",
			"jsdoc",
		],
		"body": [
			"/**",
			" * @param {e.Request} req  ",
			" * @param {e.Response} res  ",
			" * @returns {Promise<e.Response<any>>}",
			" */",
		],
		"description": "API"
	},
	"API Post": {
		"prefix": [
			"app",
			// "for-const"
		],
		"body": [
			"app.post('/${0:APIName}', async (req, res) => {",
			"\t",
			"\t",
			"\t",
			"})",
		],
		"description": "API"
	},
	"route-controllers": {
		"prefix": [
			"controller",
		],
		"body": [
			"import e from 'express';",
			"/**",
			" * ",
			" * @param {e.Request} req ",
			" * @param {e.Response} res ",
			" * @returns {Promise<e.Response<any>>}",
			" */",
			"const test = async (req, res) => {",
			"",
			"    return res.status(200).json(true)",
			"}",
			"export {",
			"    test,",
			"}",
		],
		"description": "Start a controller file for routes"
	},
	"route-endpoints": {
		"prefix": [
			"endpoints",
		],
		"body": [
			"import { Router } from 'express';",
			"import { ${0:TestFunction} } from '../controllers/${1:test}-controller.js';",
			"",
			"const router = Router();",
			"",
			"router.post('/${0:TestFunction}', async (req, res) => {",
			"    return ${0:TestFunction}(req, res);",
			"});",
			"",
			"export default router;",
		],
		"description": "Routes endpoints"
	},
	"route-crud-endpoints": {
		"prefix": [
			"endpoints",
			"crud",
		],
		"body": [
			"import {",
			"\tGetOneFrom${1:Test}s, Get${1:Test}s, Post${1:Test}s, Patch${1:Test}s, Delete${1:Test}s,",
			"} from '../controllers/${0:tests}-controller.js';",
			"import asyncHandler from 'express-async-handler';",
			"",
			"// import { decodeIDToken, ensureAuthorized } from '../middleware/auth-middleware.js';",
			"// import { ValidatePost${1:Test}s, ValidateGet${1:Test}s, ValidatePatch${1:Test}s } from '../validations/${0:tests}-validations.js';",
			"",
			"import e from 'express';",
			"const router = e.Router();",
			"router.route",
			"",
			"router.get('/${0:tests}', Get${1:Test}s);",
			"",
			"router.get('/${0:tests}/:${1:Test}Id',",
			"\t// @ts-ignore",
			"\tasyncHandler(GetOneFrom${1:Test}s));",
			"",
			"router.post('/${0:tests}',",
			"\t// @ts-ignore",
			"\tasyncHandler(Post${1:Test}s));",
			"",
			"router.patch('/${0:tests}/:${1:Test}Id',",
			"\t// @ts-ignore",
			"\tasyncHandler(Patch${1:Test}s));",
			"",
			"router.delete('/${0:tests}/:${1:Test}Id',",
			"\t// @ts-ignore",
			"\tasyncHandler(Delete${1:Test}s));",
			"",
			"export default router;",
		],
		"description": "Routes endpoints"
	},
	"crud-controllers": {
		"prefix": [
			"controller",
			"crud"
		],
		"body": [
			"import e from 'express';",
			"",
			"import { ReadOneFrom${0:CollectionName}s, Read${0:CollectionName}s, Update${0:CollectionName}s, Create${0:CollectionName}s, Remove${0:CollectionName}s, } from './../databaseControllers/${2:tests}-databaseController.js';",
			"/**",
			" * @typedef {import('./../databaseControllers/${2:tests}-databaseController.js').${0:CollectionName}Data} ${0:CollectionName}Data ",
			" */",
			"",
			"/**",
			" * ",
			" * @param {e.Request} req ",
			" * @param {e.Response} res ",
			" * @returns {Promise<e.Response<${0:CollectionName}Data>>}",
			" */",
			"const GetOneFrom${1:Test}s = async (req, res) => {",
			"    const { ${1:Test}Id } = req.params;",
			"    const data = await ReadOneFrom${0:CollectionName}s(${1:Test}Id);",
			"    return res.json(data);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {e.Request} req ",
			" * @param {e.Response} res ",
			" * @returns {Promise<e.Response<Array<${0:CollectionName}Data>>>}",
			" */",
			"const Get${1:Test}s = async (req, res) => {",
			"    const { Filter, NextId, Limit, OrderBy } = req.query;",
			"    // @ts-ignore",
			"    const data = await Read${0:CollectionName}s(Filter, NextId, Limit, OrderBy);",
			"    return res.json(data);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {e.Request} req ",
			" * @param {e.Response} res ",
			" * @returns {Promise<e.Response<true>>}",
			" */",
			"const Post${1:Test}s = async (req, res) => {",
			"    await Create${0:CollectionName}s(req.body);",
			"    return res.json(true);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {e.Request} req ",
			" * @param {e.Response} res ",
			" * @returns {Promise<e.Response<true>>}",
			" */",
			"const Patch${1:Test}s = async (req, res) => {",
			"    const { ${1:Test}Id } = req.params;",
			"    await Update${0:CollectionName}s(req.body, ${1:Test}Id);",
			"    return res.json(true);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {e.Request} req ",
			" * @param {e.Response} res ",
			" * @returns {Promise<e.Response<true>>}",
			" */",
			"const Delete${1:Test}s = async (req, res) => {",
			"    const { ${1:Test}Id } = req.params;",
			"    await Remove${0:CollectionName}s(${1:Test}Id);",
			"    return res.json(true);",
			"}",
			"",
			"",
			"export {",
			"    GetOneFrom${1:Test}s, Get${1:Test}s, Post${1:Test}s, Patch${1:Test}s, Delete${1:Test}s",
			"}",
		],
		"description": "Start a controller file for routes"
	},
	"database-crud-controller": {
		"prefix": [
			"controller",
			"crud",
			"database"
		],
		"body": [
			"import dataHandling from './functions.js'",
			"",
			"/**",
			" * @typedef {object} ${0:CollectionName}Data",
			" * @property {string} ${0:CollectionName}Name",
			" * @property {string} Name",
			" * @property {string} DocId",
			" * @property {string} Dob",
			" * @property {number} Age",
			" */",
			"",
			"",
			"",
			"/**",
			" * ",
			" * @param {undefined|object} Where ",
			" * @param {undefined|string} NextIndex ",
			" * @param {undefined|number} Limit ",
			" * @param {undefined|object} orderBy ",
			" * @returns {Promise<Array<${0:CollectionName}Data>>} Returns ${0:CollectionName}Data",
			" */",
			"const Read${0:CollectionName}s = async (Where, NextIndex, Limit, orderBy) => {",
			"    return dataHandling.Read('${0:CollectionName}s', undefined, NextIndex, Limit, Where, orderBy);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {string} DocId ",
			" * @returns {Promise<${0:CollectionName}Data>}",
			" */",
			"const ReadOneFrom${0:CollectionName}s = async (DocId) => {",
			"    return dataHandling.Read('${0:CollectionName}s', DocId);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {${0:CollectionName}Data|object} data",
			" * @param {string} DocId ",
			" * @returns {Promise<boolean>}",
			" */",
			"const Update${0:CollectionName}s = async (data, DocId) => {",
			"    return dataHandling.Update('${0:CollectionName}s', data, DocId);",
			"}",
			"",
			"",
			"/**",
			" * ",
			" * @param {${0:CollectionName}Data|object} data",
			" * @param {string|undefined} DocId ",
			" * @returns {Promise<string>}",
			" */",
			"const Create${0:CollectionName}s = async (data, DocId = undefined) => {",
			"    return dataHandling.Create('${0:CollectionName}s', data, DocId);",
			"}",
			"",
			"/**",
			" * ",
			" * @param {string} DocId ",
			" * @returns {Promise<boolean>}",
			" */",
			"const Remove${0:CollectionName}s = async (DocId) => {",
			"    return dataHandling.Delete('${0:CollectionName}s', DocId);",
			"}",
			"",
			"",
			"export {",
			"    Read${0:CollectionName}s,",
			"    ReadOneFrom${0:CollectionName}s,",
			"    Update${0:CollectionName}s,",
			"    Create${0:CollectionName}s,",
			"    Remove${0:CollectionName}s",
			"}",
		],
		"description": "Database Controller"
	}
}